{
  "name": "gulp-path",
  "version": "2.0.2",
  "description": "Creates file's paths in a simple and organized way",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/klauskpm/gulp-path.git"
  },
  "keywords": [
    "gulp",
    "path",
    "gulp-path",
    "gulp-paths"
  ],
  "author": {
    "name": "Klaus Kazlauskas",
    "email": "klausmachado@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/klauskpm/gulp-path/issues"
  },
  "homepage": "https://github.com/klauskpm/gulp-path",
  "readme": "# gulp-path\r\n\r\nGenerates a path build based on the base paths setted.\r\n\r\n## Getting Started\r\nInstall the module with: `npm install gulp-path`\r\n\r\nNow pay attention to the following example, because it will be referenced all the way.  \r\n```js\r\nvar gulp = require('gulp'),\r\n    gulpPath = require('gulp-path');\r\n    \r\nvar assets = gulpPath.Base({\r\n        src: './assets/',\r\n        dest: './resources/'\r\n    }),\r\n    public = gulpPath.Base('./public/'),\r\n    app = gulpPath.Base();\r\n    \r\nvar paths = {\r\n        img: new assets.Path('img'),\r\n        js: new assets.Path('js', 'js'),\r\n        fonts: new public.Path('fonts'),\r\n        controllers: new app.Path('controllers', 'js')\r\n    };\r\n    \r\ngulp.task('default', function (done) {\r\n    gulp.src(paths.js.files(['main', 'compiled'], 'min.js'))\r\n        .pipe(gulp.dest(paths.js.dest))\r\n        .on('end', done());\r\n});\r\n```\r\n\r\n### Creating the base paths\r\nAfter you require the gulp-path model (`var gulpPath = require('gulp-path')`),\r\nyou need to create your base paths.  \r\nAnd for that, you have 3 ways to do it.\r\n\r\n- Imperative mode (As an Object)\r\n    - This is the only way you can choose different paths for your destination\r\n     and source files;  \r\n        Ex: `var assets = gulpPath.Base({ src: './assets/', dest: './resources/' });`\r\n- Kinda-care mode (As a String)\r\n    - Setting up as a string, will make your paths for destination and source\r\n    files be the same;  \r\n        Ex: `var public = gulpPath.Base('./public/');`\r\n- I'm not even looking mode (Nothing, really)\r\n    - Just calling it will make your paths for destination and source files to\r\n    be the same, and will be setted as `'./'`;  \r\n        Ex: `var app = gulpPath.Base();`\r\n        \r\nIn every option above, it will return this very same Object:\r\n```js\r\n{\r\n    basePaths: {\r\n        src: './source/path',\r\n        dest: './destination/path'\r\n    },\r\n    // Path class will be explained in the following\r\n    Path: function (path [, extension]) {}\r\n}\r\n```\r\n\r\n### Creating paths with Path Class\r\nAfter the base paths had been created, you can now create your paths.  \r\n\r\nIt is required to set the path you want, but can also pass the files extension as optional.\r\n```js\r\n// Setting paths\r\nvar paths = {\r\n        // img.dest = './resources/images/'\r\n        // img.src = './assets/images/**/*'\r\n        img: new assets.Path('images'),\r\n        // js.dest = './resources/js/'\r\n        // js.src = './assets/js/**/*.js'\r\n        js: new assets.Path('js', 'js'),\r\n        // fonts.dest = './public/fonts/'\r\n        // fonts.src = './public/fonts/**/*'\r\n        fonts: new public.Path('fonts'),\r\n        // controllers.dest = './controllers/'\r\n        // controllers.src = './controllers/**/*.js' \r\n        controllers: new app.Path('controllers', 'js')\r\n    };\r\n```\r\n\r\nAs response, you will recieve the Path Class with the following\r\nstructure:\r\n```js\r\nPath = function (path [, extension]) {\r\n    this.dest = './destBasePath/filesPath/';\r\n    this.src = './srcBasePath/filesPath/**/*[.extension]';\r\n    // Return the files passed with the source path\r\n    this.files = function (files [, filesExtension]) {};\r\n}\r\n```\r\n\r\n### Generating files blob with Path's files function\r\nSo, now you already declared your paths, but still is a pain to write all the\r\npaths like bellow right?\r\n```js\r\ngulp.task('default', function (done) {\r\n    gulp.src(['./assets/js/main.min.js', './assets/js/compiled.min.js'])\r\n        .pipe(gulp.dest(paths.js.dest))\r\n        .on('end', done());\r\n});\r\n```\r\n\r\nThose days are over. Now you just need to call `Path.files(files [, \r\nfilesExtension]);`.  \r\n```js\r\ngulp.task('default', function (done) {\r\n    gulp.src(paths.js.files(['main', 'compiled'], 'min.js'))\r\n        .pipe(gulp.dest(paths.js.dest))\r\n        .on('end', done());\r\n});\r\n```",
  "readmeFilename": "README.md",
  "_id": "gulp-path@2.0.2",
  "dist": {
    "shasum": "459452e7ab5276313bd1883ccda647ca8de60134"
  },
  "_from": "gulp-path@",
  "_resolved": "https://registry.npmjs.org/gulp-path/-/gulp-path-2.0.2.tgz"
}
